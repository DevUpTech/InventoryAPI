// Code generated by DevUp technologies, 11/12/2023 17:23:45
using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Diagnostics;
using System.Reflection;
using System.Text;

namespace InventoryDAL
{
    public class DbConfigurationService
    {
        public static void ConfigureDb(string connectionString)
        {
            try
            {
				if (!TableExists("Product", connectionString))
					CreateTableIfNotExists("Product", GetCreateCommand_Product(), connectionString);


	        }
            catch (Exception ex)
            {
                throw;
            }
        }
		
		public static string GetCreateCommand_Product()
		{
			string createTableCommand = @"CREATE TABLE [dbo].[Product](
            	            [Id] [bigint] IDENTITY(1,1) NOT NULL PRIMARY KEY,
                            [Name] nvarchar(MAX) NOT NULL ,
[CategoryId] int NULL ,
[NetPrice] money NOT NULL ,
[SalesPrice] money NOT NULL ,
[StockQuantity] float NOT NULL ,
[ProductionDate] datetime NOT NULL ,
[Status] int NULL ,);";
			return createTableCommand;
		}



        public static bool TableExists(string tableName, string connectionString)

        {
            try
            {
                string existsTableCommand = @"SELECT COUNT(*)
                    FROM INFORMATION_SCHEMA.TABLES
                    WHERE TABLE_SCHEMA = 'dbo'
                    AND  TABLE_NAME = '{0}'";
                string sqlCommand = string.Format(existsTableCommand, tableName.ToUpper());
                
                if (ExecuteCommand(connectionString, sqlCommand) > 0)
                {
                    Trace.WriteLine(string.Format("Table/Object {0} already exists.", tableName));
                    return true;
                }
                else
                {
                    Trace.WriteLine(string.Format("Table/Object {0} does not exists. System will create it now.", tableName));
                    return false;
                }
            }
            catch (Exception ex)
            {
                string errorMessage = string.Format("{0}-{1}, Error:{2}", MethodBase.GetCurrentMethod().DeclaringType.Name, MethodBase.GetCurrentMethod().Name, ex.Message);
                Trace.WriteLine(errorMessage);
                Trace.WriteLine(ex.ToString());
                throw new Exception(errorMessage, ex);
            }
        }

        public static void CreateTableIfNotExists(string tableName, string createTableCommand, string connectionString)
        {
            try
            {
                string existsTableCommand = @"SELECT COUNT(*)
                 FROM INFORMATION_SCHEMA.TABLES
                 WHERE TABLE_SCHEMA = 'dbo'
                 AND  TABLE_NAME = '{0}'";
                string sqlCommand = string.Format(existsTableCommand, tableName.ToUpper());
                if (ExecuteCommand(connectionString, sqlCommand) > 0)
                {
                    Trace.WriteLine(string.Format("Table/Object {0} already exists.", tableName));
                }
                else
                {
                    Trace.WriteLine(string.Format("Table/Object {0} does not exists. System will create it now.", tableName));
                    sqlCommand = createTableCommand;
                    ExecuteCommand(connectionString, sqlCommand);
                    Trace.WriteLine(string.Format("Table/Object {0} created.", tableName));
                }
            }
            catch (Exception ex)
            {
                if (ex.InnerException != null && ex.InnerException.Message.Contains("There is already an object named"))
                    return;
                string errorMessage = string.Format("{0}-{1}, Error:{2}", MethodBase.GetCurrentMethod().DeclaringType.Name, MethodBase.GetCurrentMethod().Name, ex.Message);
                Trace.WriteLine(errorMessage);
                Trace.WriteLine(ex.ToString());
                //throw new Exception(errorMessage, ex);
            }
        }

        public static long ExecuteCommand(string connectionString, string command)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                try
                {
                    connection.Open();
                    return ExecuteCommand(connection, command);
                }
                catch (Exception ex)
                {
                    string errorMessage = string.Format("{0}-{1}, Error executing command:{2}, Error: {3}", MethodBase.GetCurrentMethod().DeclaringType.Name, MethodBase.GetCurrentMethod().Name, command, ex.Message);
                    Trace.WriteLine(errorMessage);
                    Trace.WriteLine(ex.ToString());
                    throw new Exception(errorMessage, ex);
                }
            }
        }

        public static long ExecuteCommand(DbConnection connection, string command)
        {
            using (SqlCommand sqlCommand = new SqlCommand(command, connection as SqlConnection))
            {
                try
                {
                    object returnValue = sqlCommand.ExecuteScalar();
                    if (returnValue != null)
                        return Convert.ToInt64(returnValue);
                    else
                        return 0;
                }
                catch (Exception ex)
                {
                    string errorMessage = string.Format("{0}-{1}, Error executing command:{2}, Error: {3}", MethodBase.GetCurrentMethod().DeclaringType.Name, MethodBase.GetCurrentMethod().Name, command, ex.Message);
                    Trace.WriteLine(errorMessage);
                    Trace.WriteLine(ex.ToString());
                    throw new Exception(errorMessage, ex);
                }
            }
        }
    }
}

